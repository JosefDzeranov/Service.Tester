@{
    ViewData["Title"] = "Contact";
}

<h2>@ViewData["Title"]</h2>
<h3>@ViewData["Message"]</h3>

<address>
    One Microsoft Way<br />
    Redmond, WA 98052-6399<br />
    <abbr title="Phone">P:</abbr>
    425.555.0100
</address>


<ul id="items" class="block__list block__list_words">
    <li>item 1</li>
    <li>item 2</li>
    <li>item 3</li>
</ul>


<div data-force="30" class="layer block" style="left: 14.5%; top: 0; width: 37%">
    <div class="layer title">List A</div>
    <ul id="foo" class="block__list block__list_words">
        <li>бегемот</li>
        <li>корм</li>
        <li>антон</li>
        <li>сало</li>
        <li>железосталь</li>
        <li>валик</li>
        <li>кровать</li>
        <li>краб</li>
    </ul>
</div>
<script src="~/lib/Sortable/Sortable.min.js"></script>
<script>
    
    var el = document.getElementById('items');
    var sortable = Sortable.create(el);
    /*var sortable = new Sortable(el, {
        group: "name",  // or { name: "...", pull: [true, false, clone], put: [true, false, array] }
        sort: true,  // sorting inside list
        delay: 0, // time in milliseconds to define when the sorting should start
        disabled: false, // Disables the sortable if set to true.
        store: null,  //  Store
        animation: 150,  // ms, animation speed moving items when sorting, `0` — without animation
        handle: ".my-handle",  // Drag handle selector within list items
        filter: ".ignore-elements",  // Selectors that do not lead to dragging (String or Function)
        preventOnFilter: true, // Call `event.preventDefault()` when triggered `filter`
        draggable: ".item",  // Specifies which items inside the element should be draggable
        ghostClass: "sortable-ghost",  // Class name for the drop placeholder
        chosenClass: "sortable-chosen",  // Class name for the chosen item
        dragClass: "sortable-drag",  // Class name for the dragging item
        dataIdAttr: 'data-id',

        forceFallback: false,  // ignore the HTML5 DnD behaviour and force the fallback to kick in

        fallbackClass: "sortable-fallback",  // Class name for the cloned DOM Element when using forceFallback
        fallbackOnBody: false,  // Appends the cloned DOM Element into the Document's Body
        fallbackTolerance: 0, // Specify in pixels how far the mouse should move before it's considered as a drag.

        scroll: true, // or HTMLElement
        scrollFn: function(offsetX, offsetY, originalEvent) {  }, // if you have custom scrollbar scrollFn may be used for autoscrolling
        scrollSensitivity: 30, // px, how near the mouse must be to an edge to start scrolling.
        scrollSpeed: 10, // px

        setData: function (/** DataTransfer #1#dataTransfer, /** HTMLElement#1#dragEl) {
            dataTransfer.setData('Text', dragEl.textContent); // `dataTransfer` object of HTML5 DragEvent
        },

        // Element is chosen
        onChoose: function (/**Event#1#evt) {
            evt.oldIndex;  // element index within parent
        },

        // Element dragging started
        onStart: function (/**Event#1#evt) {
            evt.oldIndex;  // element index within parent
        },

        // Element dragging ended
        onEnd: function (/**Event#1#evt) {
            var itemEl = evt.item;  // dragged HTMLElement
            evt.to;    // target list
            evt.from;  // previous list
            evt.oldIndex;  // element's old index within old parent
            evt.newIndex;  // element's new index within new parent
        },

        // Element is dropped into the list from another list
        onAdd: function (/**Event#1#evt) {
            // same properties as onEnd
        },

        // Changed sorting within list
        onUpdate: function (/**Event#1#evt) {
            // same properties as onEnd
        },

        // Called by any change to the list (add / update / remove)
        onSort: function (/**Event#1#evt) {
            // same properties as onEnd
        },

        // Element is removed from the list into another list
        onRemove: function (/**Event#1#evt) {
            // same properties as onEnd
        },

        // Attempt to drag a filtered element
        onFilter: function (/**Event#1#evt) {
            var itemEl = evt.item;  // HTMLElement receiving the `mousedown|tapstart` event.
        },

        // Event when you move an item in the list or between lists
        onMove: function (/**Event#1#evt, /**Event#1#originalEvent) {
            // Example: http://jsbin.com/tuyafe/1/edit?js,output
            evt.dragged; // dragged HTMLElement
            evt.draggedRect; // TextRectangle {left, top, right и bottom}
            evt.related; // HTMLElement on which have guided
            evt.relatedRect; // TextRectangle
            originalEvent.clientY; // mouse position
            // return false; — for cancel
        },

        // Called when creating a clone of element
        onClone: function (/**Event#1#evt) {
            var origEl = evt.item;
            var cloneEl = evt.clone;
        }
    });*/
</script> >

<address>
    <strong>Support:</strong> <a href="mailto:Support@example.com">Support@example.com</a><br />
    <strong>Marketing:</strong> <a href="mailto:Marketing@example.com">Marketing@example.com</a>
</address>
